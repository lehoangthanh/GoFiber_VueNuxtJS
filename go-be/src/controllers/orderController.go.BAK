package controllers

import (
	"context"
	"fmt"
	"github.com/gofiber/fiber/v2"
	"github.com/stripe/stripe-go/v72"
	"github.com/stripe/stripe-go/v72/checkout/session"
	"hello/src/database"
	"hello/src/models"
	"net/smtp"
)

func Orders(c *fiber.Ctx) error {
	var orders []models.Order
	if err := database.DB.Preload("OrderItems").Find(&orders).Error; err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"message": err.Error(),
		})
	}
	
	for i, order := range orders {
		orders[i].Name = order.FullName()
		orders[i].Total = order.GetTotal()
	}
	return c.JSON(orders)
}

type CreateOrderRequest struct {
	Code string
	FirstName string
	LastName string
	Email string
	Address string
	Country string
	City string
	Zip string
	Products []map[string]int
}

func CreateOrder (c *fiber.Ctx) error {
	var request CreateOrderRequest
	if err := c.BodyParser(&request); err != nil {
		return err
	}
	
	var link models.Link
	if err := database.DB.Preload("User").First(&link, models.Link{
		Code: request.Code,
	}).Error; err != nil || link.Id == 0 {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"message": "Invaild Link!",
		})
	}

	order := models.Order{
		Code: link.Code,
		UserId: link.UserId,
		AmbassadorEmail: link.User.Email,
		FirstName: request.FirstName,
		LastName: request.LastName,
		Email: request.Email,
		Address: request.Address,
		Country: request.Country,
		City: request.City,
		Zip: request.Zip,
	}
	tx :=  database.DB.Begin()
	if err := tx.Create(&order).Error; err != nil {
		tx.Rollback()
		c.Status(fiber.StatusInternalServerError)
		return c.JSON(fiber.Map{
			"message": err.Error(),
		})
	}
	
	var lineItems []*stripe.CheckoutSessionLineItemParams
	
	for _, requestProduct := range request.Products {
		product := models.Product{}
		product.Id = uint(requestProduct["product_id"])
		database.DB.First(&product)
		total := product.Price * float64(requestProduct["quantity"])
		item := models.OrderItem{
			OrderId: order.Id,
			ProductTitle: product.Title,
			Price: product.Price,
			Quantity:  uint(requestProduct["quantity"]),
			AmbassadorRevenue: 0.1 * total,
			AdminRevenue: 0.9 * total,
		}
		if err := tx.Create(&item).Error; err != nil {
			tx.Rollback()
			c.Status(fiber.StatusInternalServerError)
			return c.JSON(fiber.Map{
				"message": err.Error(),
			})
		}
		
		lineItems = append(lineItems, &stripe.CheckoutSessionLineItemParams{
			Name: stripe.String(product.Title),
			Description: stripe.String(product.Description),
			Images: []*string{stripe.String(product.Image)},
			Amount: stripe.Int64(100 * int64(product.Price)),
			Currency: stripe.String("usd"),
			Quantity: stripe.Int64(int64(requestProduct["quantity"])),
		})
	}
	stripe.Key = "sk_test_51JquPHGJPn6dEONefQ1LuyIfvcVAHhaSKZ2LwSbJOG5RwURgyTY3YwbIuJaFxOjTzCZBH9JZz7RKZmdMqYgu0pJH00IM1Gp8So"
	params := stripe.CheckoutSessionParams{
		SuccessURL: stripe.String("http://localhost:8000/success?source={CHECKOUT_SESSION_ID}"),
		CancelURL: stripe.String("http://localhost:8000/error"),
		PaymentMethodTypes: stripe.StringSlice([]string{"card"}),
		LineItems: lineItems,
	}
	
	s, err := session.New(&params)
	if err != nil {
		tx.Rollback()
		c.Status(fiber.StatusInternalServerError)
		return c.JSON(fiber.Map{
			"message": err.Error(),
		})
	}
	order.TransactionId = s.ID
	if err := tx.Save(&order).Error; err != nil {
		tx.Rollback()
		c.Status(fiber.StatusInternalServerError)
		return c.JSON(fiber.Map{
			"message": err.Error(),
		})
	}
	
	tx.Commit()
	return c.JSON(order)
}

func CompleteOrder(c *fiber.Ctx) error {
	var data map[string]string
	if err := c.BodyParser(&data); err != nil {
		return err
	}
	order := models.Order{}
	database.DB.Preload("OrderItems").First(&order, models.Order{
		TransactionId: data["source"],
	})
	
	if order.Id == 0 {
		c.Status(fiber.StatusNotFound)
		return c.JSON(fiber.Map{
			"message": "Order not found",
		})
	}
	order.Complete = true
	database.DB.Save(&order)
	go func(order models.Order) {
		ambassadorRevenue := 0.0
		adminRevenue := 0.0
		for _, item := range order.OrderItems {
			ambassadorRevenue += item.AmbassadorRevenue
			adminRevenue += item.AdminRevenue
		}
		user := models.User{}
		user.Id = order.UserId
		database.DB.First(&user)
		database.Cache.ZIncrBy(context.Background(), "rankings", ambassadorRevenue, user.Name())
		ambassadorMessage := []byte(fmt.Sprintf("You earned $%f from the link #%s", ambassadorRevenue, order.Code))
		err := smtp.SendMail("host.docker.internal:1025", nil, "no-reply@email.com", []string{order.AmbassadorEmail}, ambassadorMessage).Error()
		if err != "" {
			fmt.Println("==ambassadorMessage======", err)
		}
		
		adminMessage := []byte(fmt.Sprintf("Order #%d with a total of $%f has been completed", order.Id, adminRevenue))
		err = smtp.SendMail("host.docker.internal:1025", nil, "no-reply@email.com", []string{"admin@admin.com"}, adminMessage).Error()
		if err != "" {
			fmt.Println("==admin@admin.com======", err)
		}

	}(order)
	
	return c.JSON(fiber.Map{
		"message": "success",
	})
}